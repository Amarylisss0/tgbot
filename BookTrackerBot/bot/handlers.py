#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞
"""

import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram import Update
from telegram.ext import ContextTypes
from telegram.error import BadRequest

from config import MESSAGES, BOOKS_PER_PAGE
from database.db import (
    add_or_update_user, get_user_books, add_book_to_global, 
    add_book_to_user_library, remove_book_from_user_library,
    update_user_book_rating, search_books_in_db, get_book_by_id,
    set_user_state, get_user_state, clear_user_state,
    check_book_in_user_library
)
from services.openlibrary import openlibrary_api
from services.recommendations import recommendation_system
from services.book_sources import book_source_manager
from bot.keyboards import (
    get_main_menu_keyboard, get_add_book_keyboard, get_library_menu_keyboard,
    get_sort_keyboard, get_book_actions_keyboard, get_search_results_keyboard,
    get_pagination_keyboard, get_confirmation_keyboard, get_rating_keyboard,
    get_cancel_keyboard, get_recommendations_keyboard, get_book_detail_keyboard,
    get_book_sources_keyboard
)
from utils.validators import validate_rating, validate_text_length

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        add_or_update_user(user.id, user.username, user.first_name, user.last_name)
        
        await update.message.reply_text(
            MESSAGES['start'],
            reply_markup=get_main_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        await update.message.reply_text(MESSAGES['error'])

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        await update.message.reply_text(
            MESSAGES['help'],
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ help_command: {e}")
        await update.message.reply_text(MESSAGES['error'])

async def add_book_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add"""
    try:
        await update.message.reply_text(
            "üìñ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏:",
            reply_markup=get_add_book_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_book_command: {e}")
        await update.message.reply_text(MESSAGES['error'])

async def my_library_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /library"""
    try:
        user_id = update.effective_user.id
        books = get_user_books(user_id)
        
        if not books:
            await update.message.reply_text(
                MESSAGES['empty_library'],
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        await update.message.reply_text(
            f"üìö –í–∞—à–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ ({len(books)} –∫–Ω–∏–≥):",
            reply_markup=get_library_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_library_command: {e}")
        await update.message.reply_text(MESSAGES['error'])

async def recommendations_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recommendations"""
    try:
        user_id = update.effective_user.id
        recommendations = recommendation_system.get_recommendations(user_id)
        
        if not recommendations:
            await update.message.reply_text(
                MESSAGES['no_recommendations'],
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        message = "‚ú® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å:\n\n"
        
        for i, book in enumerate(recommendations[:3], 1):
            message += f"{i}. üìñ *{book['title']}*\n"
            message += f"üë§ –ê–≤—Ç–æ—Ä: {book['author']}\n"
            
            if book.get('genre'):
                message += f"üìÇ –ñ–∞–Ω—Ä: {book['genre']}\n"
            
            rec_type = book.get('recommendation_type', 'unknown')
            if rec_type == 'genre_based':
                message += "üéØ –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –∂–∞–Ω—Ä–∞–º\n"
            elif rec_type == 'content_based':
                message += "üéØ –ü–æ—Ö–æ–∂–∞ –Ω–∞ –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –∫–Ω–∏–≥–∏\n"
            elif rec_type == 'popular':
                message += "üéØ –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –∫–Ω–∏–≥–∞\n"
            
            message += "\n"
        
        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=get_recommendations_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ recommendations_command: {e}")
        await update.message.reply_text(MESSAGES['error'])

async def search_books_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
    try:
        user_id = update.effective_user.id
        set_user_state(user_id, 'waiting_search_query')
        
        await update.message.reply_text(
            MESSAGES['enter_search_query'],
            reply_markup=get_cancel_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ search_books_command: {e}")
        await update.message.reply_text(MESSAGES['error'])

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    try:
        user_id = update.effective_user.id
        clear_user_state(user_id)
        
        await update.message.reply_text(
            MESSAGES['cancel'],
            reply_markup=get_main_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_command: {e}")
        await update.message.reply_text(MESSAGES['error'])

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        state, data = get_user_state(user_id)
        
        if state == 'waiting_search_query':
            await handle_search_query(update, context, text)
        elif state == 'adding_manual_book':
            await handle_manual_book_data(update, context, text, data)
        elif state == 'waiting_rating':
            await handle_rating_input(update, context, text, data)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                reply_markup=get_main_menu_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_message: {e}")
        await update.message.reply_text(MESSAGES['error'])

async def handle_search_query(update: Update, context: ContextTypes.DEFAULT_TYPE, query: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        user_id = update.effective_user.id
        clear_user_state(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        selected_source = context.user_data.get('selected_source', 'openlibrary')
        
        # –ò—â–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
        local_books = search_books_in_db(query, limit=3)
        
        # –ò—â–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
        external_books = []
        
        if selected_source == 'all':
            # –ü–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
            all_results = book_source_manager.search_in_all_sources(query, limit_per_source=3)
            for source_id, books in all_results.items():
                external_books.extend(books)
        else:
            # –ü–æ–∏—Å–∫ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ
            external_books = book_source_manager.search_in_source(selected_source, query, limit=5)
        
        if not local_books and not external_books:
            await update.message.reply_text(
                MESSAGES['search_no_results'],
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['search_results'] = external_books
        context.user_data['local_results'] = local_books
        context.user_data['search_query'] = query
        
        message = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
        
        if local_books:
            message += "üìö –ò–∑ –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n"
            for i, book in enumerate(local_books, 1):
                message += f"{i}. {book['title']} - {book['author']}\n"
            message += "\n"
        
        if external_books:
            source_names = {
                'openlibrary': 'Open Library',
                'googlebooks': 'Google Books',
                'loc': 'Library of Congress',
                'isbndb': 'ISBNDB'
            }
            
            if selected_source == 'all':
                message += "üåê –ò–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n"
            else:
                source_name = source_names.get(selected_source, '–≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞')
                message += f"üåê –ò–∑ {source_name}:\n"
            
            await update.message.reply_text(
                message,
                reply_markup=get_search_results_keyboard(external_books, 0, selected_source)
            )
        else:
            await update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_search_query: {e}")
        await update.message.reply_text(MESSAGES['error'])

async def handle_manual_book_data(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏"""
    try:
        user_id = update.effective_user.id
        
        if not data:
            # –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            set_user_state(user_id, 'adding_manual_book', json.dumps({'step': 'title', 'data': {}}))
            await update.message.reply_text(
                "üìñ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:",
                reply_markup=get_cancel_keyboard()
            )
            return
        
        try:
            state_data = json.loads(data)
        except json.JSONDecodeError:
            state_data = {'step': 'title', 'data': {}}
        
        step = state_data.get('step')
        book_data = state_data.get('data', {})
        
        if step == 'title':
            if not validate_text_length(text, max_length=200):
                await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
                return
            
            book_data['title'] = text
            set_user_state(user_id, 'adding_manual_book', 
                         json.dumps({'step': 'author', 'data': book_data}))
            await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏:")
            
        elif step == 'author':
            if not validate_text_length(text, max_length=100):
                await update.message.reply_text("‚ùå –ò–º—è –∞–≤—Ç–æ—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
                return
            
            book_data['author'] = text
            set_user_state(user_id, 'adding_manual_book', 
                         json.dumps({'step': 'genre', 'data': book_data}))
            await update.message.reply_text("üìÇ –í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏:")
            
        elif step == 'genre':
            if not validate_text_length(text, max_length=50):
                await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
                return
            
            book_data['genre'] = text
            set_user_state(user_id, 'adding_manual_book', 
                         json.dumps({'step': 'description', 'data': book_data}))
            await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:")
            
        elif step == 'description':
            if not validate_text_length(text, max_length=1000):
                await update.message.reply_text("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
                return
            
            book_data['description'] = text
            set_user_state(user_id, 'adding_manual_book', 
                         json.dumps({'step': 'rating', 'data': book_data}))
            await update.message.reply_text("‚≠ê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É –∫–Ω–∏–≥–∏ (–æ—Ç 1 –¥–æ 10):")
            
        elif step == 'rating':
            rating = validate_rating(text)
            if rating is None:
                await update.message.reply_text(MESSAGES['invalid_rating'])
                return
            
            book_data['rating'] = rating
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ –±–∞–∑—É
            book_id = add_book_to_global(
                title=book_data['title'],
                author=book_data['author'],
                genre=book_data['genre'],
                description=book_data['description']
            )
            
            add_book_to_user_library(user_id, book_id, rating)
            
            clear_user_state(user_id)
            
            await update.message.reply_text(
                MESSAGES['book_added'],
                reply_markup=get_main_menu_keyboard()
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_manual_book_data: {e}")
        await update.message.reply_text(MESSAGES['error'])

async def handle_rating_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ü–µ–Ω–∫–∏"""
    try:
        user_id = update.effective_user.id
        
        rating = validate_rating(text)
        if rating is None:
            await update.message.reply_text(MESSAGES['invalid_rating'])
            return
        
        book_id = int(data)
        update_user_book_rating(user_id, book_id, rating)
        
        clear_user_state(user_id)
        
        await update.message.reply_text(
            MESSAGES['book_updated'],
            reply_markup=get_main_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_rating_input: {e}")
        await update.message.reply_text(MESSAGES['error'])

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    logger.info(f"Callback –ø–æ–ª—É—á–µ–Ω: {update.callback_query.data} –æ—Ç {update.callback_query.from_user.id}")
    try:
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = update.effective_user.id
        
        # –ü–†–ò–û–†–ò–¢–ï–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        if data.startswith("ol_book_"):
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
                parts = data.split("_")
                page = int(parts[2]) if len(parts) > 2 else 0
                book_index = int(parts[3]) if len(parts) > 3 else 0
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                search_results = context.user_data.get('search_results', [])
                
                if book_index >= len(search_results):
                    await query.edit_message_text("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_main_menu_keyboard())
                    return
                
                selected_book = search_results[book_index]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É
                book_id = add_book_to_global(
                    title=selected_book.get('title', ''),
                    author=selected_book.get('author', ''),
                    genre=selected_book.get('genre', ''),
                    description=selected_book.get('description', ''),
                    openlibrary_id=selected_book.get('external_id', ''),
                    cover_url=selected_book.get('cover_url', ''),
                    publication_year=selected_book.get('first_publish_year')
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∫–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if check_book_in_user_library(user_id, book_id):
                    await query.edit_message_text(
                        "üìö –≠—Ç–∞ –∫–Ω–∏–≥–∞ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ!",
                        reply_markup=get_main_menu_keyboard()
                    )
                    return
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å
                title = selected_book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                author = selected_book.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
                
                message = f"üìñ {title}\n"
                message += f"üë§ –ê–≤—Ç–æ—Ä: {author}\n"
                
                if selected_book.get('genre'):
                    message += f"üìÇ –ñ–∞–Ω—Ä: {selected_book['genre']}\n"
                
                if selected_book.get('first_publish_year'):
                    message += f"üìÖ –ì–æ–¥: {selected_book['first_publish_year']}\n"
                
                if selected_book.get('description'):
                    desc = selected_book['description']
                    if len(desc) > 200:
                        desc = desc[:197] + "..."
                    message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
                
                message += "\n‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Å –æ—Ü–µ–Ω–∫–æ–π:"
                
                await query.edit_message_text(
                    message,
                    reply_markup=get_rating_keyboard(book_id)
                )
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–Ω–∏–≥–∏: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏", reply_markup=get_main_menu_keyboard())
                return
        elif data.startswith("search_page_"):
        # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            try:
                parts = data.split("_")
                page = int(parts[2])
            except (IndexError, ValueError):
                page = 0

         # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            selected_source = context.user_data.get('selected_source', 'openlibrary')
            query_text      = context.user_data.get('search_query', '')
            all_books       = context.user_data.get('search_results', [])

         # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            page_size = 5
            total_pages = (len(all_books) + page_size - 1) // page_size
            
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö [0, total_pages-1]
            page = max(0, min(page, total_pages - 1))

         # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞—è ‚Äî —Å–±—Ä–æ—Å –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—É
            start = page * page_size
            end   = start + page_size
            page_books = all_books[start:end]

    # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            await query.edit_message_text(
                 f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ¬´{context.user_data.get('search_query')}¬ª\n—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages}:",
                 reply_markup=get_search_results_keyboard(
                    books=page_books,
                    page=page,
                    source=context.user_data.get("selected_source","openlibrary")
                )
            )
            return


        elif data.startswith("db_book_"):

            # –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º callback_data: "db_book_<external_id>"
            external_id = data.split("_", 1)[1]
            search_results = context.user_data.get('search_results', [])
            selected_book = next((b for b in search_results if b.get('external_id') == external_id), None)
            if not selected_book:
                await query.edit_message_text("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_main_menu_keyboard())
                return

            book_id = add_book_to_global(
                title=selected_book.get('title', ''),
                author=selected_book.get('author', ''),
                genre=selected_book.get('genre', ''),
                description=selected_book.get('description', ''),
                openlibrary_id=selected_book.get('external_id', ''),
                cover_url=selected_book.get('cover_url', ''),
                publication_year=selected_book.get('first_publish_year')
            )

            if check_book_in_user_library(user_id, book_id):
                await query.edit_message_text(
                    "üìö –≠—Ç–∞ –∫–Ω–∏–≥–∞ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ!",
                    reply_markup=get_main_menu_keyboard()
                )
                return

            title = selected_book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            author = selected_book.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
            message = f"üìñ {title}\nüë§ –ê–≤—Ç–æ—Ä: {author}\n"
            if selected_book.get('genre'):
                message += f"üìÇ –ñ–∞–Ω—Ä: {selected_book['genre']}\n"
            if selected_book.get('first_publish_year'):
                message += f"üìÖ –ì–æ–¥: {selected_book['first_publish_year']}\n"
            if selected_book.get('description'):
                desc = selected_book['description']
                if len(desc) > 200:
                    desc = desc[:197] + "..."
                message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
            message += "\n‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Å –æ—Ü–µ–Ω–∫–æ–π:"

            await query.edit_message_text(
                message,
                reply_markup=get_rating_keyboard(book_id)
            )
            return
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if data == "main_menu":
            await query.edit_message_text(
                MESSAGES['choose_action'],
                reply_markup=get_main_menu_keyboard()
            )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏
        elif data == "add_book":
            await query.edit_message_text(
                "üìñ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏:",
                reply_markup=get_add_book_keyboard()
            )
        
        elif data == "add_manual":
            clear_user_state(user_id)
            set_user_state(user_id, 'adding_manual_book', json.dumps({'step': 'title', 'data': {}}))
            await query.edit_message_text(
                "üìñ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:",
                reply_markup=get_cancel_keyboard()
            )
        
        elif data == "search_multiple_sources":
            await query.edit_message_text(
                "üåê –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥:",
                reply_markup=get_book_sources_keyboard()
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        elif data.startswith("source_"):
            source_type = data[7:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "source_"
            context.user_data['selected_source'] = source_type
            set_user_state(user_id, 'waiting_search_query')
            
            source_names = {
                'openlibrary': 'üìö Open Library',
                'googlebooks': 'üìñ Google Books',
                'loc': 'üèõÔ∏è Library of Congress',
                'isbndb': 'üìò ISBNDB',
                'all': 'üîç –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏'
            }
            
            source_name = source_names.get(source_type, '–≤—ã–±—Ä–∞–Ω–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ')
            message = f"üîç –ü–æ–∏—Å–∫ –≤ {source_name}\n\n" + MESSAGES['enter_search_query']
            
            await query.edit_message_text(
                message,
                reply_markup=get_cancel_keyboard()
            )
        
        # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞
        elif data == "my_library":
            books = get_user_books(user_id)
            if not books:
                await query.edit_message_text(
                    MESSAGES['empty_library'],
                    reply_markup=get_main_menu_keyboard()
                )
            else:
                await query.edit_message_text(
                    f"üìö –í–∞—à–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ ({len(books)} –∫–Ω–∏–≥):",
                    reply_markup=get_library_menu_keyboard()
                )
        
        elif data == "library_all":
            await show_user_books(query, user_id)
        
        elif data == "library_sort":
            await query.edit_message_text(
                "üî§ –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:",
                reply_markup=get_sort_keyboard()
            )
        
        elif data.startswith("sort_"):
            sort_by = data[5:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "sort_"
            await show_user_books(query, user_id, sort_by=sort_by)
        
        # –ü–æ–∏—Å–∫
        elif data == "search_books":
            set_user_state(user_id, 'waiting_search_query')
            await query.edit_message_text(
                MESSAGES['enter_search_query'],
                reply_markup=get_cancel_keyboard()
            )
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        elif data == "recommendations":
            recommendations = recommendation_system.get_recommendations(user_id)
            
            if not recommendations:
                await query.edit_message_text(
                    MESSAGES['no_recommendations'],
                    reply_markup=get_main_menu_keyboard()
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            message = "‚ú® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å:\n\n"
            
            for i, book in enumerate(recommendations[:5], 1):
                message += f"{i}. üìñ *{book['title']}*\n"
                message += f"üë§ {book['author']}\n"
                if book.get('genre'):
                    message += f"üìÇ {book['genre']}\n"
                message += "\n"
            
            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                reply_markup=get_recommendations_keyboard()
            )
        
        elif data == "refresh_recommendations":
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = recommendation_system.get_recommendations(user_id)
            
            message = "‚ú® –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n"
            
            for i, book in enumerate(recommendations[:5], 1):
                message += f"{i}. üìñ *{book['title']}*\n"
                message += f"üë§ {book['author']}\n"
                if book.get('genre'):
                    message += f"üìÇ {book['genre']}\n"
                message += "\n"
            
            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                reply_markup=get_recommendations_keyboard()
            )
        
        # –î–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–∏–≥–∞–º–∏
        elif data.startswith("add_to_library_"):
            book_id = int(data.split("_")[-1])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∫–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
            if check_book_in_user_library(user_id, book_id):
                await query.edit_message_text("üìö –≠—Ç–∞ –∫–Ω–∏–≥–∞ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ!")
                return
            
            set_user_state(user_id, 'waiting_rating', str(book_id))
            await query.edit_message_text(
                "‚≠ê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É –∫–Ω–∏–≥–∏ (–æ—Ç 1 –¥–æ 10):",
                reply_markup=get_cancel_keyboard()
            )
        
        elif data.startswith("rate_"):
            # —Ä–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            _, str_book_id, str_rating = data.split("_")
            book_id = int(str_book_id)
            rating = int(str_rating)

            # –µ—Å–ª–∏ –µ—â—ë –Ω–µ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ–º, –∏–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º
            if not check_book_in_user_library(user_id, book_id):
                add_book_to_user_library(user_id, book_id, rating)
                text = MESSAGES['book_added']      # ¬´–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –æ—Ü–µ–Ω–∫–∞ 
            else:   
                update_user_book_rating(user_id, book_id, rating)
                text = MESSAGES['book_updated']    # ¬´–û—Ü–µ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞¬ª
            await query.edit_message_text(
                text,
                reply_markup=get_main_menu_keyboard()
            )
        
        elif data.startswith("remove_book_"):
            book_id = int(data.split("_")[-1])
            await query.edit_message_text(
                "üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–Ω–∏–≥—É –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏?",
                reply_markup=get_confirmation_keyboard("remove", book_id)
            )
        

        
        elif data.startswith("confirm_remove_"):
            book_id = int(data.split("_")[-1])
            remove_book_from_user_library(user_id, book_id)
            
            await query.edit_message_text(
                MESSAGES['book_deleted'],
                reply_markup=get_main_menu_keyboard()
            )
        
        elif data.startswith("edit_rating_"):
            book_id = int(data.split("_")[-1])
            await query.edit_message_text(
                "‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É:",
                reply_markup=get_rating_keyboard(book_id)
            )
        
        # –û—Ç–º–µ–Ω–∞
        elif data == "cancel":
            clear_user_state(user_id)
            await query.edit_message_text(
                MESSAGES['cancel'],
                reply_markup=get_main_menu_keyboard()
            )
        
        # –ü–æ–º–æ—â—å
        elif data == "help":
            await query.edit_message_text(
                MESSAGES['help'],
                reply_markup=get_main_menu_keyboard()
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞  
        elif data.startswith("ol_book_"):
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
                parts = data.split("_")
                page = int(parts[2]) if len(parts) > 2 else 0
                book_index = int(parts[3]) if len(parts) > 3 else 0
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                search_results = context.user_data.get('search_results', [])
                
                if book_index >= len(search_results):
                    await query.edit_message_text("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_main_menu_keyboard())
                    return
                
                selected_book = search_results[book_index]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É
                book_id = add_book_to_global(
                    title=selected_book.get('title', ''),
                    author=selected_book.get('author', ''),
                    genre=selected_book.get('genre', ''),
                    description=selected_book.get('description', ''),
                    openlibrary_id=selected_book.get('external_id', ''),
                    cover_url=selected_book.get('cover_url', ''),
                    publication_year=selected_book.get('first_publish_year')
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∫–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if check_book_in_user_library(user_id, book_id):
                    await query.edit_message_text(
                        "üìö –≠—Ç–∞ –∫–Ω–∏–≥–∞ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ!",
                        reply_markup=get_main_menu_keyboard()
                    )
                    return
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å
                title = selected_book.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                author = selected_book.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
                
                message = f"üìñ {title}\n"
                message += f"üë§ –ê–≤—Ç–æ—Ä: {author}\n"
                
                if selected_book.get('genre'):
                    message += f"üìÇ –ñ–∞–Ω—Ä: {selected_book['genre']}\n"
                
                if selected_book.get('first_publish_year'):
                    message += f"üìÖ –ì–æ–¥: {selected_book['first_publish_year']}\n"
                
                if selected_book.get('description'):
                    desc = selected_book['description']
                    if len(desc) > 200:
                        desc = desc[:197] + "..."
                    message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
                
                message += "\n‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Å –æ—Ü–µ–Ω–∫–æ–π:"
                
                await query.edit_message_text(
                    message,
                    reply_markup=get_rating_keyboard(book_id)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–Ω–∏–≥–∏: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏", reply_markup=get_main_menu_keyboard())
        
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {data}")
        
    except BadRequest as e:
        logger.error(f"BadRequest –≤ handle_callback_query: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback_query: {e}")
        try:
            await update.callback_query.edit_message_text(MESSAGES['error'])
        except:
            pass

async def show_user_books(query, user_id: int, sort_by: str = 'date_added', page: int = 0):
    """–ü–æ–∫–∞–∑ –∫–Ω–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        books = get_user_books(user_id, sort_by=sort_by)
        
        if not books:
            await query.edit_message_text(
                MESSAGES['empty_library'],
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        start_idx = page * BOOKS_PER_PAGE
        end_idx = start_idx + BOOKS_PER_PAGE
        page_books = books[start_idx:end_idx]
        
        total_pages = (len(books) + BOOKS_PER_PAGE - 1) // BOOKS_PER_PAGE
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        sort_names = {
            'date_added': '–¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è',
            'title': '–Ω–∞–∑–≤–∞–Ω–∏—é',
            'author': '–∞–≤—Ç–æ—Ä—É',
            'genre': '–∂–∞–Ω—Ä—É',
            'rating': '–æ—Ü–µ–Ω–∫–µ'
        }
        
        message = f"üìö –í–∞—à–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ {sort_names.get(sort_by, sort_by)}):\n\n"
        
        for i, book in enumerate(page_books, start_idx + 1):
            message += f"{i}. üìñ *{book['title']}*\n"
            message += f"üë§ {book['author']}\n"
            
            if book.get('genre'):
                message += f"üìÇ {book['genre']}\n"
            
            if book.get('user_rating'):
                stars = "‚≠ê" * book['user_rating']
                message += f"‚≠ê {stars} ({book['user_rating']}/10)\n"
            
            message += "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        if total_pages > 1:
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"library_page_{page-1}_{sort_by}"))
            
            nav_buttons.append(InlineKeyboardButton(f"{page + 1}/{total_pages}", callback_data="noop"))
            
            if page < total_pages - 1:
                nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"library_page_{page+1}_{sort_by}"))
            
            keyboard.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.extend([
            [InlineKeyboardButton("üî§ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", callback_data="library_sort")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_library")]
        ])
        
        await query.edit_message_text(
            message,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_user_books: {e}")
        await query.edit_message_text(MESSAGES['error'])
