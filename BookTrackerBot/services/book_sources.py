#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∫–Ω–∏–≥
"""

import requests
import logging
from typing import List, Dict, Optional
from abc import ABC, abstractmethod

logger = logging.getLogger(__name__)

class BookSource(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–Ω–∏–≥"""
    
    @abstractmethod
    def search_books(self, query: str, limit: int = 5) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –∫–Ω–∏–≥"""
        pass
    
    @abstractmethod
    def get_source_name(self) -> str:
        """–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        pass

class OpenLibrarySource(BookSource):
    """–ò—Å—Ç–æ—á–Ω–∏–∫ Open Library"""
    
    def __init__(self):
        self.base_url = 'https://openlibrary.org'
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'BookBot/1.0 (Contact: your-email@example.com)'
        })
    
    def search_books(self, query: str, limit: int = 5) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –≤ Open Library"""
        try:
            # –£–ª—É—á—à–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            formatted_query = self._format_search_query(query)
            
            params = {
                'q': formatted_query,
                'limit': limit,
                'fields': 'key,title,author_name,first_publish_year,subject,cover_i,edition_count'
            }
            
            # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞
            search_attempts = [
                formatted_query,
                f'author:"{query}"',
                f'title:"{query}"',
                query.replace(' ', '+')
            ]
            
            for attempt_query in search_attempts:
                try:
                    params['q'] = attempt_query
                    response = self.session.get(f'{self.base_url}/search.json', params=params, timeout=10)
                    response.raise_for_status()
                    
                    data = response.json()
                    books = []
                    
                    for doc in data.get('docs', []):
                        book = self._format_book_data(doc)
                        if book:
                            books.append(book)
                    
                    if books:
                        logger.info(f"Open Library: –Ω–∞–π–¥–µ–Ω–æ {len(books)} –∫–Ω–∏–≥")
                        return books
                        
                except requests.RequestException as e:
                    logger.warning(f"Open Library –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                    continue
            
            return []
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ Open Library: {e}")
            return []
    
    def get_source_name(self) -> str:
        return "üìö Open Library"
    
    def _format_search_query(self, query: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        query = query.strip()
        query = query.replace('"', '').replace("'", "")
        
        if len(query.split()) == 1 and len(query) > 2:
            return f'author:{query}'
        
        return query
    
    def _format_book_data(self, doc: Dict) -> Optional[Dict]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏"""
        try:
            title = doc.get('title', '').strip()
            if not title:
                return None
            
            authors = doc.get('author_name', [])
            author = ', '.join(authors) if authors else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∂–∞–Ω—Ä
            subjects = doc.get('subject', [])
            genre = self._extract_genre(subjects)
            
            # URL –æ–±–ª–æ–∂–∫–∏
            cover_url = None
            cover_id = doc.get('cover_i')
            if cover_id:
                cover_url = f"https://covers.openlibrary.org/b/id/{cover_id}-M.jpg"
            
            return {
                'source': 'openlibrary',
                'external_id': doc.get('key', ''),
                'title': title,
                'author': author,
                'genre': genre,
                'description': '',  # Open Library –Ω–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –ø–æ–∏—Å–∫–µ
                'first_publish_year': doc.get('first_publish_year'),
                'cover_url': cover_url,
                'edition_count': doc.get('edition_count', 0)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Open Library: {e}")
            return None
    
    def _extract_genre(self, subjects: List[str]) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞"""
        if not subjects:
            return '–ù–µ —É–∫–∞–∑–∞–Ω'
        
        genre_map = {
            'Fiction': '–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
            'Science Fiction': '–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞',
            'Fantasy': '–§—ç–Ω—Ç–µ–∑–∏',
            'Mystery': '–î–µ—Ç–µ–∫—Ç–∏–≤',
            'Romance': '–†–æ–º–∞–Ω',
            'Biography': '–ë–∏–æ–≥—Ä–∞—Ñ–∏—è',
            'History': '–ò—Å—Ç–æ—Ä–∏—è'
        }
        
        for subject in subjects[:5]:
            for eng, rus in genre_map.items():
                if eng.lower() in subject.lower():
                    return rus
        
        return subjects[0] if subjects else '–ù–µ —É–∫–∞–∑–∞–Ω'

class GoogleBooksSource(BookSource):
    """–ò—Å—Ç–æ—á–Ω–∏–∫ Google Books API"""
    
    def __init__(self):
        self.base_url = 'https://www.googleapis.com/books/v1/volumes'
        self.session = requests.Session()
    
    def search_books(self, query: str, limit: int = 5) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –≤ Google Books"""
        try:
            params = {
                'q': query,
                'maxResults': min(limit, 40),
                'printType': 'books',
                'langRestrict': 'ru'  # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            }
            
            # –ü—Ä–æ–±—É–µ–º —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å—ã
            for lang in ['ru', 'en']:
                params['langRestrict'] = lang
                
                try:
                    response = self.session.get(self.base_url, params=params, timeout=10)
                    response.raise_for_status()
                    
                    data = response.json()
                    books = []
                    
                    for item in data.get('items', [])[:limit]:
                        book = self._format_book_data(item)
                        if book:
                            books.append(book)
                    
                    if books:
                        logger.info(f"Google Books: –Ω–∞–π–¥–µ–Ω–æ {len(books)} –∫–Ω–∏–≥")
                        return books
                        
                except requests.RequestException as e:
                    logger.warning(f"Google Books –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                    continue
            
            return []
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ Google Books: {e}")
            return []
    
    def get_source_name(self) -> str:
        return "üìñ Google Books"
    
    def _format_book_data(self, item: Dict) -> Optional[Dict]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏ Google Books"""
        try:
            volume_info = item.get('volumeInfo', {})
            
            title = volume_info.get('title', '').strip()
            if not title:
                return None
            
            authors = volume_info.get('authors', [])
            author = ', '.join(authors) if authors else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ –∂–∞–Ω—Ä—ã
            categories = volume_info.get('categories', [])
            genre = categories[0] if categories else '–ù–µ —É–∫–∞–∑–∞–Ω'
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            description = volume_info.get('description', '')
            if len(description) > 500:
                description = description[:497] + "..."
            
            # –û–±–ª–æ–∂–∫–∞
            image_links = volume_info.get('imageLinks', {})
            cover_url = image_links.get('thumbnail', image_links.get('smallThumbnail'))
            
            # –ì–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            published_date = volume_info.get('publishedDate', '')
            year = None
            if published_date:
                try:
                    year = int(published_date.split('-')[0])
                except (ValueError, IndexError):
                    pass
            
            return {
                'source': 'googlebooks',
                'external_id': item.get('id', ''),
                'title': title,
                'author': author,
                'genre': genre,
                'description': description,
                'first_publish_year': year,
                'cover_url': cover_url,
                'page_count': volume_info.get('pageCount')
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Google Books: {e}")
            return None

class LibraryOfCongressSource(BookSource):
    """–ò—Å—Ç–æ—á–Ω–∏–∫ Library of Congress"""
    
    def __init__(self):
        self.base_url = 'https://www.loc.gov/books'
        self.session = requests.Session()
    
    def search_books(self, query: str, limit: int = 5) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –≤ Library of Congress"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∏—Ö JSON API
            params = {
                'q': query,
                'fo': 'json',
                'c': min(limit, 25)
            }
            
            response = self.session.get(f'{self.base_url}/', params=params, timeout=10)
            response.raise_for_status()
            
            # Library of Congress –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
            books = []
            
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Ç–∞–∫ –∫–∞–∫ –∏—Ö API —Å–ª–æ–∂–Ω–µ–µ
            logger.info("Library of Congress: –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return books
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ Library of Congress: {e}")
            return []
    
    def get_source_name(self) -> str:
        return "üèõÔ∏è Library of Congress"

class ISBNDBSource(BookSource):
    """–ò—Å—Ç–æ—á–Ω–∏–∫ ISBNDB (—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á)"""
    
    def __init__(self):
        self.base_url = 'https://api2.isbndb.com'
        self.session = requests.Session()
        # API –∫–ª—é—á –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.api_key = None
    
    def search_books(self, query: str, limit: int = 5) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –≤ ISBNDB"""
        try:
            if not self.api_key:
                logger.warning("ISBNDB API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return []
            
            headers = {'Authorization': self.api_key}
            params = {
                'q': query,
                'pageSize': min(limit, 20)
            }
            
            response = self.session.get(f'{self.base_url}/books/{query}', 
                                      headers=headers, params=params, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            books = []
            
            for book_data in data.get('books', [])[:limit]:
                book = self._format_book_data(book_data)
                if book:
                    books.append(book)
            
            logger.info(f"ISBNDB: –Ω–∞–π–¥–µ–Ω–æ {len(books)} –∫–Ω–∏–≥")
            return books
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ ISBNDB: {e}")
            return []
    
    def get_source_name(self) -> str:
        return "üìò ISBNDB"
    
    def _format_book_data(self, book_data: Dict) -> Optional[Dict]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ISBNDB"""
        try:
            title = book_data.get('title', '').strip()
            if not title:
                return None
            
            authors = book_data.get('authors', [])
            author = ', '.join(authors) if authors else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'
            
            return {
                'source': 'isbndb',
                'external_id': book_data.get('isbn13', ''),
                'title': title,
                'author': author,
                'genre': book_data.get('subjects', ['–ù–µ —É–∫–∞–∑–∞–Ω'])[0],
                'description': book_data.get('synopsis', ''),
                'first_publish_year': book_data.get('date_published'),
                'cover_url': book_data.get('image'),
                'isbn': book_data.get('isbn13')
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö ISBNDB: {e}")
            return None

class BookSourceManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–Ω–∏–≥"""
    
    def __init__(self):
        self.sources = {
            'openlibrary': OpenLibrarySource(),
            'googlebooks': GoogleBooksSource(),
            'loc': LibraryOfCongressSource(),
            'isbndb': ISBNDBSource()
        }
        self.active_sources = ['openlibrary', 'googlebooks']  # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def get_available_sources(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        return [
            {
                'id': source_id,
                'name': source.get_source_name(),
                'active': source_id in self.active_sources
            }
            for source_id, source in self.sources.items()
        ]
    
    def search_in_source(self, source_id: str, query: str, limit: int = 5) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ"""
        if source_id not in self.sources:
            return []
        
        return self.sources[source_id].search_books(query, limit)
    
    def search_in_all_sources(self, query: str, limit_per_source: int = 3) -> Dict[str, List[Dict]]:
        """–ü–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö"""
        results = {}
        
        for source_id in self.active_sources:
            if source_id in self.sources:
                try:
                    books = self.sources[source_id].search_books(query, limit_per_source)
                    if books:
                        results[source_id] = books
                        logger.info(f"–ò—Å—Ç–æ—á–Ω–∏–∫ {source_id}: –Ω–∞–π–¥–µ–Ω–æ {len(books)} –∫–Ω–∏–≥")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ {source_id}: {e}")
                    continue
        
        return results

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
book_source_manager = BookSourceManager()